steps:
  - task: NodeTool@0
    inputs:
      versionSpec: "12.18.3"

  - task: geeklearningio.gl-vsts-tasks-yarn.yarn-installer-task.YarnInstaller@2
    inputs:
      versionSpec: "1.x"

  - task: AzureKeyVault@1
    displayName: "Azure Key Vault: Get Secrets"
    inputs:
      azureSubscription: "vscode-builds-subscription"
      KeyVaultName: vscode

  - task: DownloadPipelineArtifact@2
    inputs:
      artifact: Compilation
      path: $(Build.ArtifactStagingDirectory)
    displayName: Download compilation output

  - script: |
      set -e
      tar -xzf $(Build.ArtifactStagingDirectory)/compilation.tar.gz
    displayName: Extract compilation output

  - script: |
      set -e
      cat << EOF > ~/.netrc
      machine github.com
      login vscode
      password $(github-distro-mixin-password)
      EOF

      git config user.email "vscode@microsoft.com"
      git config user.name "VSCode"
    displayName: Prepare tooling

  - script: |
      set -e
      git pull --no-rebase https://github.com/$(VSCODE_MIXIN_REPO).git $(node -p "require('./package.json').distro")
    displayName: Merge distro

  - script: |
      npx https://aka.ms/enablesecurefeed standAlone
    displayName: Switch to Terrapin packages
    timeoutInMinutes: 5
    condition: and(succeeded(), eq(variables['ENABLE_TERRAPIN'], 'true'))

  - script: |
      mkdir -p .build
      node build/azure-pipelines/common/computeNodeModulesCacheKey.js $VSCODE_ARCH $ENABLE_TERRAPIN > .build/yarnlockhash
    displayName: Prepare yarn cache flags

  - task: Cache@2
    inputs:
      key: 'nodeModules | $(Agent.OS) | .build/yarnlockhash'
      path: .build/node_modules_cache
      cacheHitVar: NODE_MODULES_RESTORED
    displayName: Cache node_modules archive

  - script: |
      set -e
      tar -xzf .build/node_modules_cache/cache.tgz
    condition: and(succeeded(), eq(variables.NODE_MODULES_RESTORED, 'true'))
    displayName: Extract node_modules archive

  - script: |
      set -e
      npm install -g node-gyp@latest
      node-gyp --version
    displayName: Update node-gyp
    condition: and(succeeded(), eq(variables['VSCODE_ARCH'], 'x64'))

  - script: |
      set -e
      export npm_config_arch=$(NPM_ARCH)

      if [ -z "$CC" ] || [ -z "$CXX" ]; then
        export CC=$(which gcc-5)
        export CXX=$(which g++-5)
      fi

      if [ "$VSCODE_ARCH" == "x64" ]; then
        export VSCODE_REMOTE_CC=$(which gcc-4.8)
        export VSCODE_REMOTE_CXX=$(which g++-4.8)
        export VSCODE_REMOTE_NODE_GYP=$(which node-gyp)
      fi

      for i in {1..3}; do # try 3 times, for Terrapin
        yarn --frozen-lockfile && break
        if [ $i -eq 3 ]; then
          echo "Yarn failed too many times" >&2
          exit 1
        fi
        echo "Yarn failed $i, trying again..."
      done
    env:
      ELECTRON_SKIP_BINARY_DOWNLOAD: 1
      PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1
    displayName: Install dependencies
    condition: and(succeeded(), ne(variables.NODE_MODULES_RESTORED, 'true'))

  - script: |
      set -e
      node build/azure-pipelines/common/listNodeModules.js .build/node_modules_list.txt
      mkdir -p .build/node_modules_cache
      tar -czf .build/node_modules_cache/cache.tgz --files-from .build/node_modules_list.txt
    condition: and(succeeded(), ne(variables.NODE_MODULES_RESTORED, 'true'))
    displayName: Create node_modules archive

  - script: |
      set -e
      node build/azure-pipelines/mixin
    displayName: Mix in quality

  - script: |
      set -e
      VSCODE_MIXIN_PASSWORD="$(github-distro-mixin-password)" \
        yarn gulp vscode-linux-$(VSCODE_ARCH)-min-ci
    displayName: Build

  - script: |
      set -e
      VSCODE_MIXIN_PASSWORD="$(github-distro-mixin-password)" \
        yarn gulp vscode-reh-linux-$(VSCODE_ARCH)-min-ci
      VSCODE_MIXIN_PASSWORD="$(github-distro-mixin-password)" \
        yarn gulp vscode-reh-web-linux-$(VSCODE_ARCH)-min-ci
    displayName: Build Server

  - script: |
      set -e
      yarn gulp "vscode-linux-$(VSCODE_ARCH)-build-deb"
      yarn gulp "vscode-linux-$(VSCODE_ARCH)-build-rpm"
    displayName: Build deb, rpm packages
    condition: and(succeeded(), ne(variables['VSCODE_PUBLISH'], 'false'))

  - script: |
      set -e
      yarn gulp "vscode-linux-$(VSCODE_ARCH)-prepare-snap"
    displayName: Prepare snap package
    condition: and(succeeded(), ne(variables['VSCODE_PUBLISH'], 'false'))

  - script: |
      set -e
      tar -czf $(Build.ArtifactStagingDirectory)/linux.tar.gz VSCode-linux-$(VSCODE_ARCH) vscode-reh-linux-$(VSCODE_ARCH) vscode-reh-web-linux-$(VSCODE_ARCH)
    workingDirectory: $(Agent.BuildDirectory)
    displayName: Compress compilation artifact

  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: $(Build.ArtifactStagingDirectory)/linux.tar.gz
      artifactName: Linux-$(VSCODE_ARCH)
    displayName: Publish compilation artifact

  - task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
    displayName: "Component Detection"
    continueOnError: true
